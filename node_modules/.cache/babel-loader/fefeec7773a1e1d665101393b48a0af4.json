{"ast":null,"code":"var _jsxFileName = \"/home/hp/Desktop/react-quiz/src/index.js\";\nimport React, { PureComponent } from 'react';\nimport ReactDom from 'react-dom';\nimport QuestionBox from './components/QuestionBox';\nimport Result from './components/Result';\nimport './assets/style.css';\nimport quizService from './quizService';\n\nclass Quiz extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0\n    };\n\n    this.getQuestions = () => {\n      quizService().then(question => {\n        this.setState({\n          questionBank: question\n        });\n      });\n    };\n\n    this.computeAnswer = (answer, correctAnswer) => {\n      const {\n        score,\n        responses\n      } = this.state;\n\n      if (answer === correctAnswer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      this.setState({\n        responses: responses < 5 ? responses + 1 : 5\n      });\n    };\n\n    this.playAgain = () => {\n      this.getQuestions();\n      this.setState({\n        score: 0,\n        responses: 0\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  render() {\n    const {\n      questionBank,\n      responses,\n      score\n    } = this.state;\n    console.log('score: ', score);\n    console.log('responses: ', responses);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, \"Quiz App\"), questionBank.length > 0 && responses < 5 && questionBank.map(({\n      question,\n      answers,\n      correct,\n      questionId\n    }) => /*#__PURE__*/React.createElement(QuestionBox, {\n      question: question,\n      options: answers,\n      key: questionId,\n      selected: answer => this.computeAnswer(answer, correct),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 83\n      }\n    })), responses === 5 ? /*#__PURE__*/React.createElement(Result, {\n      score: score,\n      playAgain: this.playAgain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 30\n      }\n    }) : null);\n  }\n\n}\n\nReactDom.render( /*#__PURE__*/React.createElement(Quiz, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/hp/Desktop/react-quiz/src/index.js"],"names":["React","PureComponent","ReactDom","QuestionBox","Result","quizService","Quiz","state","questionBank","score","responses","getQuestions","then","question","setState","computeAnswer","answer","correctAnswer","playAgain","componentDidMount","render","console","log","length","map","answers","correct","questionId","document","getElementById"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactDom from 'react-dom';\nimport QuestionBox from './components/QuestionBox';\nimport Result from './components/Result';\nimport './assets/style.css';\nimport quizService from './quizService';\n\nclass Quiz extends PureComponent {\n    state = {\n        questionBank: [],\n        score: 0,\n        responses: 0\n    }\n\n    getQuestions = () => {\n        quizService().then(question => {\n\n            this.setState({\n                questionBank: question\n            })\n        })\n    }\n    computeAnswer = (answer, correctAnswer) => {\n        const { score, responses } = this.state\n        if (answer === correctAnswer) {\n            this.setState({\n                score: score + 1,\n            })\n        }\n        this.setState({\n            responses: responses < 5 ? responses+1 : 5\n\n        })\n    }\n\n    playAgain=()=>{\n        this.getQuestions();\n        this.setState({\n            score:0,\n            responses:0\n        })\n    }\n    componentDidMount() {\n        this.getQuestions()\n    }\n    render() {\n        const { questionBank,responses,score } = this.state\n        console.log('score: ', score);\n        console.log('responses: ', responses);\n        return (\n            <div className='container'>\n                <div className='title'>Quiz App</div>\n                {questionBank.length > 0 && \n                responses < 5 &&\n                questionBank.map(({ question, answers, correct, questionId }) => (<QuestionBox question={question} options={answers} key={questionId} selected={answer => this.computeAnswer(answer, correct)} />))}\n         {responses === 5 ? (<Result score={score} playAgain={this.playAgain}/>):null}\n            </div>\n        )\n    }\n}\nReactDom.render(<Quiz />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}